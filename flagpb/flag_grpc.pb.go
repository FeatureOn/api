// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package flagpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FlagServiceClient is the client API for FlagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlagServiceClient interface {
	GetEnvironmentFlags(ctx context.Context, in *EnvironmentFlagQuery, opts ...grpc.CallOption) (*EnvironmentFlags, error)
}

type flagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlagServiceClient(cc grpc.ClientConnInterface) FlagServiceClient {
	return &flagServiceClient{cc}
}

func (c *flagServiceClient) GetEnvironmentFlags(ctx context.Context, in *EnvironmentFlagQuery, opts ...grpc.CallOption) (*EnvironmentFlags, error) {
	out := new(EnvironmentFlags)
	err := c.cc.Invoke(ctx, "/grpc.FlagService/GetEnvironmentFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlagServiceServer is the server API for FlagService service.
// All implementations must embed UnimplementedFlagServiceServer
// for forward compatibility
type FlagServiceServer interface {
	GetEnvironmentFlags(context.Context, *EnvironmentFlagQuery) (*EnvironmentFlags, error)
	mustEmbedUnimplementedFlagServiceServer()
}

// UnimplementedFlagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlagServiceServer struct {
}

func (UnimplementedFlagServiceServer) GetEnvironmentFlags(context.Context, *EnvironmentFlagQuery) (*EnvironmentFlags, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironmentFlags not implemented")
}
func (UnimplementedFlagServiceServer) mustEmbedUnimplementedFlagServiceServer() {}

// UnsafeFlagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlagServiceServer will
// result in compilation errors.
type UnsafeFlagServiceServer interface {
	mustEmbedUnimplementedFlagServiceServer()
}

func RegisterFlagServiceServer(s grpc.ServiceRegistrar, srv FlagServiceServer) {
	s.RegisterService(&_FlagService_serviceDesc, srv)
}

func _FlagService_GetEnvironmentFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvironmentFlagQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagServiceServer).GetEnvironmentFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.FlagService/GetEnvironmentFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagServiceServer).GetEnvironmentFlags(ctx, req.(*EnvironmentFlagQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlagService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.FlagService",
	HandlerType: (*FlagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnvironmentFlags",
			Handler:    _FlagService_GetEnvironmentFlags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flagpb/flag.proto",
}
